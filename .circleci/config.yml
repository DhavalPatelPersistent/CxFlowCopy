version: 2.1
#------------------------
# --- REUSABLE CHUNKS ---
# -----------------------
orbs:
  increment-tag: dhcs/increment-tag@0.0.82
  slack: circleci/slack@3.4.2
  cxflow: checkmarx-ts/cxflow@1.0.4
  whitesource-scan: dhcs/whitesource-scan@0.0.32

env_vars: &env_vars
  environment:
    APP_NAME: fdr-ui # Should be same as $CIRCLE_PROJECT_REPONAME
    # To use, $(eval $IMAGE_TAG)
    IMAGE_TAG: &IMAGE_TAG if [ "${CIRCLE_TAG}" ]; then echo "version-$CIRCLE_TAG"; else echo "review_${CIRCLE_PROJECT_REPONAME}_br_$CIRCLE_BRANCH"; fi;
    CIRCLE_REPOSITORY_URL: git@github.com:MESMD/fdr-ui.git

    # * Configure these in the CircleCI Job *
    # AWS_ACCESS_KEY_ID: Access key for an AWS user account that can publish to ECR
    # AWS_DEFAULT_OUTPUT: Set to `table` for human readable display in logs
    # AWS_DEFAULT_REGION: Region to deploy review environments to
    # AWS_ECR_REPO_NAME: URL or Docker namespace for the Docker image
    # AWS_SECRET_ACCESS_KEY: Secret key for an AWS user account that can publish to ECR
    # CIRCLE_API_KEY: Key for making HTTP requests to CircleCI's API
    # GITHUB_ACCESS_TOKEN: Access token for the user committing the Helm Chart
    # GIT_COMMITTER_NAME: Plain language name for user committing the Helm Chart
    # GIT_COMMITTER_EMAIL: Email address for the user committing the Helm Chart

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: node:16.5-alpine
      environment:
        NODE_ENV: test

add_helm_repo: &add_helm_repo
  run:
    name: Add Helm Repo
    command: helm repo add cammis https://${GITHUB_ACCESS_TOKEN}:@raw.githubusercontent.com/mesmd/cammis-helm/main/

infrastructure_runtime: &infrastructure_runtime
  docker:
    - image: 166636506311.dkr.ecr.us-west-2.amazonaws.com/mesmd-infrastructure-container:version-1.0.7
      aws_auth:
        aws_access_key_id: $AWS_ACCESS_KEY_ID
        aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
  <<: *env_vars

install_node: &install_node
  run:
    name: Install Node
    command: |
      apk add --repository http://dl-cdn.alpinelinux.org/alpine/v3.14/main --repository http://dl-cdn.alpinelinux.org/alpine/v3.14/community --update nodejs-current npm
      npm install -g npm@7.17.0

add_github_access_token: &add_github_access_token
  run:
    name: Add GITHUB_ACCESS_TOKEN
    command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_ACCESS_TOKEN}" > ~/.npmrc

install_npm_packages: &install_npm_packages
  run:
    name: Install Node Packages
    command: npm install

build_app_dist: &build_app_dist
  run:
    name: Build Application Distribution
    command: |
      npm run build -- --production
      sed -i -e 's#/root/project/#/app/#g' .fusion/dist/production/server/server-main.js

build_docker_image: &build_docker_image
  run:
    name: Build Docker image
    command: docker build -t $AWS_ECR_REPO_NAME:$(eval $IMAGE_TAG) -t $AWS_ECR_REPO_NAME:commit-${CIRCLE_SHA1} --build-arg GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN} --build-arg NODE_ENV=production .

branch_commits_and_tags: &branch_commits_and_tags
  filters:
    tags:
      only: /^\d+\.\d+\.\d+(\-.*)?$/

install_git: &install_git
  - run:
      name: Install Git
      command: apk add git

publish_docker_image: &publish_docker_image
  run:
    name: Publish Docker image
    command: |
      $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email )
      docker push $AWS_ECR_REPO_NAME:$(eval $IMAGE_TAG)
      docker push $AWS_ECR_REPO_NAME:commit-${CIRCLE_SHA1}

trigger_review_env: &trigger_review_env
  run:
    name: If review build, trigger a review-environment deploy
    command: |
      if [ "${CIRCLE_BRANCH}" ] ; then  # Not for tag builds
        REVIEW_ENV_NAME=$(eval $IMAGE_TAG)
        MASTER_CHART_NAME=fdr-build # umbrella chart - default is cammis
        #MASTER_CHART_VERSION=0.0.3-PAT-594 # default is latest
        # helm_deploy uses IMAGE_VERSION_KEY to override the Docker image tag just for this app
        # If not set, will deploy version in latest master chart
        IMAGE_VERSION_KEY=fdr-ui.image.tag
        #IMAGE_VERSION_VAL=$REVIEW_ENV_NAME # default is "commit-${CIRCLE_SHA1}"
        PUBLISH_SERVICE=review-env-fdr-ui # external LB svc
        APP_PORT=80 # port the LB listens on, defaults to 3000
        echo "Calling back to CircleCI to build a Review Environment"
        echo "Git SHA1: ${CIRCLE_SHA1}"
        echo "Git Branch: ${CIRCLE_BRANCH}"
        echo "Review Env: ${REVIEW_ENV_NAME}"
        CCI_API_URL="https://circleci.com/api/v1.1/project/github/MESMD"
        # Generate JSON doc with build parameters
        CCI_PARAMS="{\"build_parameters\":{\"CIRCLE_JOB\":\"helm_deploy\", \
          \"MASTER_CHART_NAME\":\"${MASTER_CHART_NAME}\", \
          \"MASTER_CHART_VERSION\":\"${MASTER_CHART_VERSION}\", \
          \"IMAGE_VERSION_KEY\":\"${IMAGE_VERSION_KEY}\", \
          \"IMAGE_VERSION_VAL\":\"${IMAGE_VERSION_VAL}\", \
          \"PUBLISH_SERVICE\":\"${PUBLISH_SERVICE}\", \
          \"APP_PORT\":\"${APP_PORT}\", \
          \"GIT_SHA1\":\"${CIRCLE_SHA1}\", \
          \"GIT_REPONAME\":\"${CIRCLE_PROJECT_REPONAME}\", \
          \"GIT_BRANCH\":\"${CIRCLE_BRANCH}\", \
          \"REVIEW_ENV_NAME\":\"${REVIEW_ENV_NAME}\"}}"
        curl -u ${CIRCLE_API_KEY}: -X POST \
          --header "Content-Type: application/json" \
          -d "${CCI_PARAMS}" \
          ${CCI_API_URL}/CI-review-dev/tree/main
      fi

update_umbrella_chart: &update_umbrella_chart
  run:
    name: Update tag for umbrella chart
    command: |
      CCI_API_URL="https://circleci.com/api/v1.1/project/github/MESMD"
      COMPONENT_NAME=$APP_NAME
      echo $CIRCLE_TAG
      COMPONENT_VERSION=$CIRCLE_TAG
      CCI_PARAMS="{\"build_parameters\":{\"CIRCLE_JOB\":\"update_umbrella_chart\", \
          \"COMPONENT_NAME\":\"${COMPONENT_NAME}\", \
          \"COMPONENT_VERSION\":\"${COMPONENT_VERSION}\"}}"
      curl -u ${CIRCLE_KEY_FDR_BUILD}: -X POST \
          --header "Content-Type: application/json" \
          -d "${CCI_PARAMS}" \
          ${CCI_API_URL}/fdr-build/tree/main

commands:
  configure_helm:
    description: "Configure Helm CLI to v2.x or v3.x"
    parameters:
      version:
        type: string
        default: "2"
    steps:
      - run: cp /usr/local/bin/helm<< parameters.version >> /usr/local/bin/helm

#------------------------
# --- JOBS ---
#------------------------

jobs:
  build:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      - run:
          # Added ca-certificates for store_artifacts to work
          name: install-certificates
          command: apk add ca-certificates
      - <<: *install_git
      - run:
          name: install-test-reporter
          command: |
            wget -O ./cc-test-reporter https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
            chmod +x ./cc-test-reporter
      - <<: *add_github_access_token
      - run:
          name: install-npm
          command: npm install --unsafe-perm
      - run:
          name: Report Before Build
          command: ./cc-test-reporter before-build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - ./*

  lint:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Run Lint
          command: npm run lint

  test:
    <<: *defaults
    parallelism: 16
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repo
      - <<: *install_git
      - run:
          name: Run Tests
          command: npm run test:ci
      - run:
          name: Format Test Coverage
          command: ./cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.$CIRCLE_NODE_INDEX.json coverage/lcov.info
      - store_artifacts:
          path: coverage/lcov-report
      - persist_to_workspace:
          root: ~/repo
          paths:
            - tmp

  report:
    <<: *defaults
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repo
      - <<: *install_git
      - run:
          name: Upload Coverage To Code Climate
          command: |
            ./cc-test-reporter sum-coverage tmp/codeclimate.*.json -o tmp/codeclimate.total.json
            ./cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

  # This will build a Docker image, push it to an ECR, then trigger a review environment running that image.
  # This job is triggered by pushing to a specially-named branch in GitHub
  review_env:
    working_directory: /app
    <<: *infrastructure_runtime
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - <<: *install_node
      - <<: *add_github_access_token
      - <<: *install_npm_packages
      - <<: *build_app_dist
      - <<: *build_docker_image
      - <<: *publish_docker_image
      - <<: *trigger_review_env

  # This will retrieve the most recent Docker image, increment the tag release number,
  #  then push the newest tag version to the repo at repo-path
  # See Orb definition at https://circleci.com/orbs/registry/orb/dhcs/increment-tag
  # This job is triggered by merging to the default branch in GitHub
  increment_tag:
    <<: *infrastructure_runtime
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - increment-tag/increment-tag:
          repo-path: github.com/mesmd/$APP_NAME.git
          repo-name: $APP_NAME

  # This will build a Docker image and push it to an ECR, then build and push a Helm chart
  # This job is triggered by tagging the repo in GitHub
  # The tag must be in ##.##.## format - see workflow below
  publish_version:
    <<: *infrastructure_runtime
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - configure_helm:
          version: "3"
      - <<: *install_node
      - <<: *add_github_access_token
      - <<: *install_npm_packages
      - <<: *build_app_dist
      - <<: *build_docker_image
      - <<: *publish_docker_image
      - <<: *add_helm_repo
      - run:
          name: Package Helm Chart
          command: helm_pkg.py -c helm/${APP_NAME} -v ${CIRCLE_TAG}
      - run:
          name: Pull down Helm Chart repo
          command: |
            git config --global user.name $GIT_COMMITTER_NAME
            git config --global user.email $GIT_COMMITTER_EMAIL
            git clone https://${GITHUB_ACCESS_TOKEN}@github.com/mesmd/cammis-helm.git
      - run:
          name: Publish Helm Chart
          command: |
            git -C cammis-helm pull
            mv helm/${APP_NAME}/${APP_NAME}-${CIRCLE_TAG}.tgz cammis-helm/.
            helm repo index cammis-helm
            git -C cammis-helm add .
            git -C cammis-helm commit -m "Added ${APP_NAME}:$(eval $TAG)"
            git -C cammis-helm push
      - <<: *update_umbrella_chart

  # This will start a WhiteSource Scan job for the checked out repo and then update results to WhiteSource Dashboard
  # The repo will be scanned according to the set config in wss-unified-agent-project.config file
  # WhiteSource scan will be executed as a separate job
  scan-project:
    <<: *defaults
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - whitesource-scan/whitesource-project-scan:
          whitesource_api_key: ${WHITESOURCE_API_KEY}
          whitesource_project_scan_config: .whitesource-conf/wss-unified-agent-project-scan.config
      - store_artifacts:
          path: ./whitesource
      - slack/notify:
          message: "WhiteSource project scan has been completed for fdr-ui. The results can be viewed on whitesource"
          webhook: ${SLACK_WEBHOOK}

  scan-container:
    <<: *defaults
    <<: *env_vars
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - whitesource-scan/whitesource-container-scan:
          whitesource_api_key: ${WHITESOURCE_API_KEY}
          whitesource_container_scan_config: .whitesource-conf/wss-unified-agent-docker-scan.config
          remote_docker_version: "19.03.13"
          aws_region: ${AWS_DEFAULT_REGION}
          image_tag: $(eval $IMAGE_TAG)
      - store_artifacts:
          path: ./whitesource
      - slack/notify:
          message: "WhiteSource container scan has been completed for fdr-ui. The results can be viewed on whitesource"
          webhook: ${SLACK_WEBHOOK}

  cx-scan:
    executor: cxflow/default
    steps:
      - checkout
      - cxflow/scan:
          preset: Checkmarx Express
          report-file: checkmarx.json
          project: fdr-ui
          team: CxServer/Service Providers/DHCS/MES
          version: "9.2"
          scan-timeout: 30
      - store_artifacts:
          path: checkmarx.json

#------------------------
# --- WORKFLOWS ---
#------------------------

# This workflow will run the "test" job on any git branch-push.
# It will run the "review_env" job only on push to a review-env branch.
# For a tag push, the branch info is empty, and vice-versa.
# The "test" job must have a "tags" filter if any dependent jobs do.
# The "publish_version" job will only execute on tag pushes and will requires test to be executed successfully

workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          <<: *branch_commits_and_tags
      - lint:
          requires:
            - build
          <<: *branch_commits_and_tags
      - test:
          requires:
            - build
          <<: *branch_commits_and_tags
      - report:
          requires:
            - test
          <<: *branch_commits_and_tags
      - review_env:
          requires:
            - test
          filters:
            branches:
              only:
                - /^r_.+$/
      - increment_tag:
          filters:
            branches:
              only: main
      - publish_version:
          requires:
            - test
            - lint
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+(\-.*)?$/
      - scan-container:
          requires:
            - publish_version
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+(\-.*)?$/
  scan:
    jobs:
      - scan-project:
          filters:
            branches:
              only:
               - main
               - /^hotfix-.+$/
      - cx-scan:
          filters:
            branches:
              only:
                - main
                - /^hotfix-.+$/
